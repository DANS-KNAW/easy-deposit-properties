# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
}

type AddBagNamePayload {
    clientMutationId: String
    deposit: Deposit
}

type AddDepositPayload {
    clientMutationId: String
    deposit: Deposit
}

type AddIdentifierPayload {
    clientMutationId: String
    identifier: Identifier
}

"A SWORD2 internal property to record the type of messages sent by a client to create the deposit."
type ContentType implements Node {
    "Returns the deposit that is associated with this particular content type."
    deposit: Deposit
    "List all deposits with the same current content type."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #Determine whether to search in current content types (`LATEST`, default) or all current and past content types (`ALL`).
        contentTypeFilter: SeriesFilter! = LATEST,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder
    ): DepositConnection
    "The ID of an object"
    id: ID!
    "The timestamp at which this springfield configuration was associated with the deposit."
    timestamp: DateTime!
    "The content type associated with this deposit."
    value: String
}

"Curation event containing the data manager and status of curation for this deposit."
type Curation implements Node {
    "True if curation by the data manager has been performed."
    curationPerformed: Boolean!
    "True if curation by a data manager is required."
    curationRequired: Boolean!
    "The data manager's email address."
    datamanagerEmail: String!
    "The data manager's username in EASY."
    datamanagerUserId: String!
    "Returns the deposit that is associated with this particular curation object."
    deposit: Deposit
    "List all deposits with the same data manager."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #Find only those deposits that have this specified bag name.
        bagName: String,
        before: String,
        #List only those deposits that have this specified content type.
        contentType: DepositContentTypeFilter,
        #List only those deposits that have this specified value for 'curation performed'.
        curationPerformed: DepositCurationPerformedFilter,
        #List only those deposits that have this specified value for 'curation required'.
        curationRequired: DepositCurationRequiredFilter,
        #Determine whether to search in current curators (`LATEST`, default) only or all current and past curators (`ALL`) of this deposit.
        curatorFilter: SeriesFilter! = LATEST,
        #List only those deposits that have this specified value for DOI action.
        doiAction: DepositDoiActionFilter,
        #List only those deposits that have this specified value for DOI registered.
        doiRegistered: DepositDoiRegisteredFilter,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        #List only those deposits that have this specified ingest step label.
        ingestStep: DepositIngestStepFilter,
        #List only those deposits that have this specified value for 'is-new-version'.
        isNewVersion: DepositIsNewVersionFilter,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder,
        #List only those deposits that have this specified state label.
        state: DepositStateFilter
    ): DepositConnection
    "The ID of an object"
    id: ID!
    "True if the deposit is a new version."
    isNewVersion: Boolean
    "The timestamp at which this curation event was assigned to this deposit."
    timestamp: DateTime!
}

"Whether the deposit has been curated by the data manager."
type CurationPerformedEvent {
    "The timestamp at which the curation was completed."
    timestamp: DateTime!
    "True if curation by the data manager has been performed."
    value: Boolean!
}

"Whether curation by data manager is required."
type CurationRequiredEvent {
    "The timestamp at which was decided that this deposit requires curation."
    timestamp: DateTime!
    "True if curation by a data manager is required."
    value: Boolean!
}

"Data manager responsible for curating this deposit."
type Curator implements Node {
    "Returns the deposit that is associated with this particular curator object."
    deposit: Deposit
    "List all deposits with the same data manager."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #Find only those deposits that have this specified bag name.
        bagName: String,
        before: String,
        #List only those deposits that have this specified content type.
        contentType: DepositContentTypeFilter,
        #List only those deposits that have this specified value for 'curation performed'.
        curationPerformed: DepositCurationPerformedFilter,
        #List only those deposits that have this specified value for 'curation required'.
        curationRequired: DepositCurationRequiredFilter,
        #Determine whether to search in current curators (`LATEST`, default) only or all current and past curators (`ALL`) of this deposit.
        curatorFilter: SeriesFilter! = LATEST,
        #List only those deposits that have this specified value for DOI action.
        doiAction: DepositDoiActionFilter,
        #List only those deposits that have this specified value for DOI registered.
        doiRegistered: DepositDoiRegisteredFilter,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        #List only those deposits that have this specified ingest step label.
        ingestStep: DepositIngestStepFilter,
        #List only those deposits that have this specified value for 'is-new-version'.
        isNewVersion: DepositIsNewVersionFilter,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder,
        #List only those deposits that have this specified state label.
        state: DepositStateFilter
    ): DepositConnection
    "The data manager's email address."
    email: String!
    "The ID of an object"
    id: ID!
    "The timestamp at which the data manager was assigned to this deposit."
    timestamp: DateTime!
    "The data manager's username in EASY."
    userId: String!
}

"A connection to a list of items."
type CuratorConnection {
    "A list of edges."
    edges: [CuratorEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type CuratorEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Curator!
}

"Contains all technical metadata about this deposit."
type Deposit implements Node {
    "The name of the deposited bag."
    bagName: String
    "The content type currently associated with this deposit."
    contentType: ContentType
    "List the present and past values of content types."
    contentTypes(
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned content types.
        orderBy: ContentTypeOrder
    ): [ContentType!]!
    "The moment this deposit was created."
    creationTimestamp: DateTime!
    "Whether curation on this deposit has been performed."
    curationPerformed: Boolean
    "List the present and past values for 'curation-performed'."
    curationPerformedEvents: [CurationPerformedEvent!]!
    "Whether this deposit requires curation."
    curationRequired: Boolean
    "List the present and past values for 'curation-required'."
    curationRequiredEvents: [CurationRequiredEvent!]!
    "The data manager currently assigned to this deposit"
    curator: Curator
    "List all data manager that were ever assigned to this deposit."
    curators(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned curators.
        orderBy: CuratorOrder
    ): CuratorConnection
    "The identifier of the deposit."
    depositId: UUID!
    "Information about the depositor that submitted this deposit."
    depositor: Depositor!
    "Returns whether the DOI should be 'created' or 'updated' on registration in DataCite"
    doiAction: DoiAction
    "Lists all state changes related to whether the DOI should be 'created' or 'updated' on registration in DataCite"
    doiActionEvents: [DoiActionEvent!]!
    "Returns whether the DOI is registered in DataCite."
    doiRegistered: Boolean
    "Lists all state changes related to the registration of the DOI in DataCite"
    doiRegisteredEvents: [DoiRegisteredEvent!]!
    "The ID of an object"
    id: ID!
    "Return the identifier of the given type related to this deposit"
    identifier(
        #Find the identifier with this specific type.
        type: IdentifierType!
    ): Identifier
    "List the identifiers related to this deposit"
    identifiers: [Identifier!]!
    "The current ingest step of the deposit."
    ingestStep: IngestStep
    "List all ingest steps of the deposit."
    ingestSteps(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned ingest steps.
        orderBy: IngestStepOrder
    ): IngestStepConnection
    "Whether this deposit is a new version."
    isNewVersion: Boolean
    "List the present and past values for 'is-new-version'."
    isNewVersionEvents: [IsNewVersionEvent!]!
    "Get the timestamp at which this deposit was last modified. If the dataset was only created, the creation timestamp is returned."
    lastModified: DateTime
    "The springfield configuration currently associated with this deposit."
    springfield: Springfield
    "List the present and past values for springfield configuration."
    springfields(
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned springfields.
        orderBy: SpringfieldOrder
    ): [Springfield!]!
    "The current state of the deposit."
    state: State
    "List all states of the deposit."
    states(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned states.
        orderBy: StateOrder
    ): StateConnection
}

"A connection to a list of items."
type DepositConnection {
    "A list of edges."
    edges: [DepositEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type DepositEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Deposit!
}

"Information about the depositor that submitted this deposit."
type Depositor {
    "The EASY account of the depositor."
    depositorId: String!
    "List all deposits originating from the same depositor."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #Find only those deposits that have this specified bag name.
        bagName: String,
        before: String,
        #List only those deposits that have this specified content type.
        contentType: DepositContentTypeFilter,
        #List only those deposits that have this specified value for 'curation performed'.
        curationPerformed: DepositCurationPerformedFilter,
        #List only those deposits that have this specified value for 'curation required'.
        curationRequired: DepositCurationRequiredFilter,
        #List only those deposits that have this specified data manager.
        curator: DepositCuratorFilter,
        #List only those deposits that have this specified value for DOI action.
        doiAction: DepositDoiActionFilter,
        #List only those deposits that have this specified value for DOI registered.
        doiRegistered: DepositDoiRegisteredFilter,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        #List only those deposits that have this specified ingest step label.
        ingestStep: DepositIngestStepFilter,
        #List only those deposits that have this specified value for 'is-new-version'.
        isNewVersion: DepositIsNewVersionFilter,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder,
        #List only those deposits that have this specified state label.
        state: DepositStateFilter
    ): DepositConnection
}

"A DOI action event related to a deposit"
type DoiActionEvent {
    "The timestamp at which this value was added."
    timestamp: DateTime!
    "Whether the DOI must be 'created' or 'updated' when registering in DataCite."
    value: DoiAction!
}

"A DOI registration event related to a deposit"
type DoiRegisteredEvent {
    "The timestamp at which the DOI was registered in DataCite."
    timestamp: DateTime!
    "Whether the DOI is registered in DataCite."
    value: Boolean!
}

"An identifier related to a deposit."
type Identifier implements Node {
    "Returns the deposit that is associated with this particular identifier."
    deposit: Deposit
    "The ID of an object"
    id: ID!
    "The timestamp at which the identifier got added to this deposit."
    timestamp: DateTime!
    "The type of identifier."
    type: IdentifierType!
    "The value of the identifier."
    value: String!
}

"The ingest step of the deposit."
type IngestStep implements Node {
    "Returns the deposit that is associated with this particular ingest step"
    deposit: Deposit
    "List all deposits with the same current ingest step."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        #Determine whether to search in current ingest steps (`LATEST`, default) or all current and past ingest steps (`ALL`).
        ingestStepFilter: SeriesFilter! = LATEST,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder
    ): DepositConnection
    "The ID of an object"
    id: ID!
    "The label of the ingest step."
    step: IngestStepLabel!
    "The timestamp at which the deposit got into this ingest step."
    timestamp: DateTime!
}

"A connection to a list of items."
type IngestStepConnection {
    "A list of edges."
    edges: [IngestStepEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type IngestStepEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: IngestStep!
}

"State whether this deposit is a new version, requiring a new DOI and deposit agreement to be generated by easy-ingest-flow."
type IsNewVersionEvent {
    "The timestamp at which was decided that this is a new version."
    timestamp: DateTime!
    "True if the deposit is a new version."
    value: Boolean
}

"The root query for implementing GraphQL mutations."
type Mutation {
    "Register the bag's name for the deposit identified by 'id'."
    addBagName(input: AddBagNameInput!): AddBagNamePayload
    "Register a new deposit with 'id', 'creationTimestamp' and 'depositId'."
    addDeposit(input: AddDepositInput!): AddDepositPayload
    "Add an identifier to the deposit identified by 'id'."
    addIdentifier(input: AddIdentifierInput!): AddIdentifierPayload
    "Set the content type for this deposit."
    setContentType(input: SetContentTypeInput!): SetContentTypePayload
    "Assign a curation event to the deposit identified by 'id'."
    setCuration(input: SetCurationInput!): SetCurationPayload
    "Set whether the DOI should be 'created' or 'updated' on registration in DataCite."
    setDoiAction(input: SetDoiActionInput!): SetDoiActionPayload
    "Set whether the DOI has been registered in DataCite."
    setDoiRegistered(input: SetDoiRegisteredInput!): SetDoiRegisteredPayload
    "Set the springfield configuration for this deposit."
    setSpringfield(input: SetSpringfieldInput!): SetSpringfieldPayload
    "Update the ingest step of the deposit identified by 'id'."
    updateIngestStep(input: UpdateIngestStepInput!): UpdateIngestStepPayload
    "Update the state of the deposit identified by 'id'."
    updateState(input: UpdateStateInput!): UpdateStatePayload
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The query root of easy-deposit-properties' GraphQL interface."
type Query {
    "Get the technical metadata of the deposit identified by 'id'."
    deposit(
        #The id for which to find the deposit
        id: UUID!
    ): Deposit
    "Get the technical metadata related to this depositor."
    depositor(
        #If provided, only show deposits from this depositor.
        id: String
    ): Depositor
    "List all registered deposits."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        #Find only those deposits that have this specified bag name.
        bagName: String,
        before: String,
        #List only those deposits that have this specified content type.
        contentType: DepositContentTypeFilter,
        #List only those deposits that have this specified value for 'curation performed'.
        curationPerformed: DepositCurationPerformedFilter,
        #List only those deposits that have this specified value for 'curation required'.
        curationRequired: DepositCurationRequiredFilter,
        #List only those deposits that have this specified data manager.
        curator: DepositCuratorFilter,
        #List only those deposits that have this specified value for DOI action.
        doiAction: DepositDoiActionFilter,
        #List only those deposits that have this specified value for DOI registered.
        doiRegistered: DepositDoiRegisteredFilter,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        #List only those deposits that have this specified ingest step label.
        ingestStep: DepositIngestStepFilter,
        #List only those deposits that have this specified value for 'is-new-version'.
        isNewVersion: DepositIsNewVersionFilter,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder,
        #List only those deposits that have this specified state label.
        state: DepositStateFilter
    ): DepositConnection
    "Find an identifier with the given type and value."
    identifier(
        #The type of identifier to be found.
        type: IdentifierType!,
        #The value of the identifier to be found.
        value: String!
    ): Identifier
    "Fetches an object given its ID"
    node(
        #The ID of an object
        id: ID!
    ): Node
    "Fetches objects given their IDs"
    nodes(
        #The IDs of objects
        ids: [ID!]!
    ): [Node]!
}

type SetContentTypePayload {
    clientMutationId: String
    contentType: ContentType
}

type SetCurationPayload {
    clientMutationId: String
    curation: Curation
}

type SetDoiActionPayload {
    clientMutationId: String
    doiAction: DoiActionEvent
}

type SetDoiRegisteredPayload {
    clientMutationId: String
    doiRegistered: DoiRegisteredEvent
}

type SetSpringfieldPayload {
    clientMutationId: String
    springfield: Springfield
}

"Springfield configuration associated with this deposit."
type Springfield implements Node {
    "The collection of Springfield."
    collection: String!
    "Returns the deposit that is associated with this particular springfield configuration."
    deposit: Deposit
    "The domain of Springfield."
    domain: String!
    "The ID of an object"
    id: ID!
    "The playmode used in Springfield."
    playmode: SpringfieldPlayMode!
    "The timestamp at which this springfield configuration was associated with the deposit."
    timestamp: DateTime!
    "The user of Springfield."
    user: String!
}

"The state of the deposit."
type State implements Node {
    "Returns the deposit that is associated with this particular state"
    deposit: Deposit
    "List all deposits with the same current state label."
    deposits(
        after: String,
        #List only those elements that have a timestamp equal to the given timestamp.
        atTimestamp: DateTime,
        before: String,
        #List only those elements that have a timestamp earlier than this given timestamp.
        earlierThan: DateTime,
        first: Int,
        last: Int,
        #List only those elements that have a timestamp later than this given timestamp.
        laterThan: DateTime,
        #Ordering options for the returned deposits.
        orderBy: DepositOrder,
        #Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`).
        stateFilter: SeriesFilter! = LATEST
    ): DepositConnection
    "Additional information about the state."
    description: String!
    "The ID of an object"
    id: ID!
    "The state label of the deposit."
    label: StateLabel!
    "The timestamp at which the deposit got into this state."
    timestamp: DateTime!
}

"A connection to a list of items."
type StateConnection {
    "A list of edges."
    edges: [StateEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type StateEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: State!
}

type UpdateIngestStepPayload {
    clientMutationId: String
    ingestStep: IngestStep
}

type UpdateStatePayload {
    clientMutationId: String
    state: State
}

"Properties by which content types can be ordered"
enum ContentTypeOrderField {
    #Order content types by timestamp
    TIMESTAMP
    #Order content types by value
    VALUE
}

"A SWORD2 internal property to record the type of messages sent by a client to create the deposit."
enum ContentTypeValue {
    #content type 'application/octet-stream'
    OCTET
    #content type 'application/zip'
    ZIP
}

"Properties by which curators can be ordered"
enum CuratorOrderField {
    #Order curators by timestamp
    TIMESTAMP
    #Order curators by step
    USERID
}

"Properties by which deposits can be ordered"
enum DepositOrderField {
    #Order deposits by bag name
    BAG_NAME
    #Order deposits by creation timestamp
    CREATION_TIMESTAMP
    #Order deposits by depositId
    DEPOSIT_ID
}

"Whether the DANS-DOI must be created or updated in the DataCite resolver."
enum DoiAction {
    #The DANS-DOI must be created in the DataCite resolver.
    CREATE
    #None action must be taken for this DANS-DOI in the DataCite resolver.
    NONE
    #The DANS-DOI must be updated in the DataCite resolver.
    UPDATE
}

"The type of the identifier."
enum IdentifierType {
    #The bagstore identifier.
    BAG_STORE
    #The doi identifier.
    DOI
    #The Fedora identifier.
    FEDORA
    #The 'urn:nbn' identifier.
    URN
}

"The label identifying the ingest step."
enum IngestStepLabel {
    #Indexing the archival copy and its relation to other bags.
    BAGINDEX
    #Creating an archival copy of the deposit for storage in the vault.
    BAGSTORE
    #The ingest process of this deposit has completed.
    COMPLETED
    #A dissemination copy of the deposit is being made in Fedora.
    FEDORA
    #Persistent identifiers are being generated for this deposit.
    PID_GENERATOR
    #The file content of the deposit's payload is being index.
    SOLR4FILES
    #Dissemination copies of the audio/video files in the deposit are being made in Springfield.
    SPRINGFIELD
    #Started validating the deposit.
    VALIDATE
}

"Properties by which ingest steps can be ordered"
enum IngestStepOrderField {
    #Order ingest steps by step
    STEP
    #Order ingest steps by timestamp
    TIMESTAMP
}

"Possible directions in which to order a list of items when provided an orderBy argument"
enum OrderDirection {
    #Specifies an ascending order for a given orderBy argumen.
    ASC
    #Specifies a descending order for a given orderBy argument
    DESC
}

"Mark a query to only search through current states, or also to include past states."
enum SeriesFilter {
    #Search through both current and past states.
    ALL
    #Only search through current states.
    LATEST
}

"Properties by which springfields can be ordered"
enum SpringfieldOrderField {
    #Order springfields by timestamp
    TIMESTAMP
}

"The playmode in Springfield for this deposit."
enum SpringfieldPlayMode {
    #Play audio/video continuously in Springfield.
    CONTINUOUS
    #Play audio/video in Springfield as selected in a menu.
    MENU
}

"The label identifying the state of a deposit."
enum StateLabel {
    #Was successfully archived in the data vault.
    ARCHIVED
    #Open for additional data.
    DRAFT
    #Failed to be archived because of some unexpected condition. It may be possible to manually fix this.
    FAILED
    #Was successfully archived in the Fedora Archive.
    FEDORA_ARCHIVED
    #Closed and being checked for validity.
    FINALIZING
    #Does not contain a valid bag.
    INVALID
    #Currently undergoing curation by the datamanagers.
    IN_REVIEW
    #Did not meet the requirements set by easy-ingest-flow for this type of deposit.
    REJECTED
    #Valid and waiting for processing by easy-ingest-flow, or being processed in it.
    SUBMITTED
    #Deposit uploaded, waiting to be finalized.
    UPLOADED
}

"Properties by which states can be ordered"
enum StateOrderField {
    #Order states by label
    LABEL
    #Order states by timestamp
    TIMESTAMP
}

input AddBagNameInput {
    "The name of the deposited bag."
    bagName: String!
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
}

input AddDepositInput {
    "The name of the deposited bag."
    bagName: String
    clientMutationId: String
    "The timestamp at which this deposit was created."
    creationTimestamp: DateTime!
    "The deposit's identifier."
    depositId: UUID!
    "The depositor that submits this deposit."
    depositorId: String!
}

input AddIdentifierInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "The timestamp at which the identifier got added to this deposit."
    timestamp: DateTime!
    "The type of identifier."
    type: IdentifierType!
    "The value of the identifier."
    value: String!
}

"Ordering options for content types"
input ContentTypeOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order content types by"
    field: ContentTypeOrderField!
}

"Ordering options for curators"
input CuratorOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order curators by"
    field: CuratorOrderField!
}

"The label and filter to be used in searching for deposits by content type."
input DepositContentTypeFilter {
    "Determine whether to search in current content types (`LATEST`, default) or all current and past content types (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this content type."
    value: ContentTypeValue!
}

"The value and filter to be used in searching for deposits by 'curation-performed'."
input DepositCurationPerformedFilter {
    "Determine whether to search in current values (`LATEST`, default) or all current and past values (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this value for 'curation-performed'."
    value: Boolean!
}

"The value and filter to be used in searching for deposits by 'curation-required'."
input DepositCurationRequiredFilter {
    "Determine whether to search in current values (`LATEST`, default) or all current and past values (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this value for 'curation-required'."
    value: Boolean!
}

"The label and filter to be used in searching for deposits by curator."
input DepositCuratorFilter {
    "Determine whether to search in current curator (`LATEST`, default) only or all current and past curators (`ALL`) of this deposit."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this curator."
    userId: String!
}

"The label and filter to be used in searching for deposits by DOI registration action."
input DepositDoiActionFilter {
    "Determine whether to search in current value for DOI action (`LATEST`, default) or all current and past values (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with the same value for DOI action."
    value: DoiAction!
}

"The label and filter to be used in searching for deposits by whether the DOI is registered."
input DepositDoiRegisteredFilter {
    "Determine whether to search in current value for DOI registered (`LATEST`, default) or all current and past values (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with the same value for DOI registered."
    value: Boolean!
}

"The label and filter to be used in searching for deposits by ingest step"
input DepositIngestStepFilter {
    "Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this state."
    label: IngestStepLabel!
}

"The value and filter to be used in searching for deposits by 'is-new-version'."
input DepositIsNewVersionFilter {
    "Determine whether to search in current values (`LATEST`, default) or all current and past values (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this value for 'is-new-version'."
    value: Boolean!
}

"Ordering options for deposits"
input DepositOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order deposit by"
    field: DepositOrderField!
}

"The label and filter to be used in searching for deposits by state"
input DepositStateFilter {
    "Determine whether to search in current states (`LATEST`, default) or all current and past states (`ALL`)."
    filter: SeriesFilter = LATEST
    "If provided, only show deposits with this state."
    label: StateLabel!
}

"Ordering options for ingest steps"
input IngestStepOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order ingest steps by"
    field: IngestStepOrderField!
}

input SetContentTypeInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "The timestamp at which this springfield configuration was associated with the deposit."
    timestamp: DateTime!
    "The content type associated with this deposit."
    value: ContentTypeValue!
}

input SetCurationInput {
    clientMutationId: String
    "The data manager's email address."
    datamanagerEmail: String!
    "The data manager's username in EASY."
    datamanagerUserId: String!
    "The deposit's identifier."
    depositId: UUID!
    "True if curation by the data manager has been performed."
    isCurationPerformed: Boolean!
    "True if curation by a data manager is required."
    isCurationRequired: Boolean!
    "True if the deposit is a new version."
    isNewVersion: Boolean
    "The timestamp at which the curation event was assigned to this deposit."
    timestamp: DateTime!
}

input SetDoiActionInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "The timestamp at which this value was added."
    timestamp: DateTime!
    "Whether the DOI must be 'created' or 'updated' when registering in DataCite."
    value: DoiAction!
}

input SetDoiRegisteredInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "The timestamp at which the DOI was registered in DataCite."
    timestamp: DateTime!
    "Whether the DOI is registered in DataCite."
    value: Boolean!
}

input SetSpringfieldInput {
    clientMutationId: String
    "The collection of Springfield."
    collection: String!
    "The deposit's identifier."
    depositId: UUID!
    "The domain of Springfield."
    domain: String!
    "The playmode used in Springfield."
    playmode: SpringfieldPlayMode!
    "The timestamp at which this springfield configuration was associated with the deposit."
    timestamp: DateTime!
    "The user of Springfield."
    user: String!
}

"Ordering options for springfields"
input SpringfieldOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order springfields by"
    field: SpringfieldOrderField!
}

"Ordering options for states"
input StateOrder {
    "The ordering direction"
    direction: OrderDirection!
    "The field to order state by"
    field: StateOrderField!
}

input UpdateIngestStepInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "The label of the ingest step."
    step: IngestStepLabel!
    "The timestamp at which the deposit got into this ingest step."
    timestamp: DateTime!
}

input UpdateStateInput {
    clientMutationId: String
    "The deposit's identifier."
    depositId: UUID!
    "Additional information about the state."
    description: String!
    "The state label of the deposit."
    label: StateLabel!
    "The timestamp at which the deposit got into this state."
    timestamp: DateTime!
}


"A DateTime scalar type represents textual data, formatted as an ISO8601 date-time."
scalar DateTime

"The UUID scalar type represents textual data, formatted as a universally unique identifier."
scalar UUID
